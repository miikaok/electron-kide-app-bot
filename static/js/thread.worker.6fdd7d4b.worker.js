!function(){AbortSignal.timeout??=function(t){const e=new AbortController;return setTimeout((()=>e.close()),t),e.signal};const t=async(t,e,s,a,n)=>{const o=s.availability>=s.productVariantMaximumReservableQuantity?s.productVariantMaximumReservableQuantity:s.availability;if(0===o)return void self.postMessage({type:"buy_failed"});const r=await(async(t,e)=>{try{const s=await fetch("https://api.kide.app/api/reservations",{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`,caches:"no-cache"},signal:AbortSignal.timeout(e)});if(200===s.status){const t=await s.json();return null==t.model?.reservations?[]:t.model.reservations.map((t=>t.inventoryId))}}catch(s){return null}})(t,e);if(null===r)return void self.postMessage({type:"request_error"});if(self.postMessage({type:"request_success"}),r.includes(s.inventoryId))return void self.postMessage({type:"in_cart"});const i=a&&n<=o?n:o;200!==(await fetch("https://api.kide.app/api/reservations",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`,caches:"no-cache"},body:JSON.stringify({toCancel:[],toCreate:[{inventoryId:s.inventoryId,productVariantUserForm:null,quantity:i}]}),signal:AbortSignal.timeout(e)})).status?self.postMessage({type:"buy_failed"}):self.postMessage({type:"buy_success"})};self.addEventListener("message",(e=>{const{eventID:s,threadDelay:a,requestTimeout:n,strictPriority:o,priorityItems:r,bearerToken:i,useCustomCount:l,ticketBuyCount:u}=e.data;setInterval((async()=>{const e=await(async(t,e)=>{try{const s=await fetch(`https://api.kide.app/api/products/${t}`,{method:"GET",caches:"no-cache",signal:AbortSignal.timeout(e)});if(200===s.status)return s.json()}catch(s){return null}})(s,n);if(self.postMessage({type:"request_start"}),null===e)return void self.postMessage({type:"request_error"});const a=e.model.variants.filter((t=>t.isProductVariantActive));if(0===a.length)return void self.postMessage({type:"no_available_variants"});if(r.length>0&&(r.forEach((e=>{const{value:s}=e,o=a.find((t=>t.name.toLowerCase().includes(s.toLowerCase())));if(null!=o)return self.postMessage({type:"buy_attempt",value:o.name}),t(i,n,o,l,u)})),o))return void self.postMessage({type:"strict_skip"});const c=Math.floor(Math.random()*a.length);return self.postMessage({type:"buy_attempt",value:a[c].name}),t(i,n,a[c],l,u)}),a)}))}();
//# sourceMappingURL=thread.worker.6fdd7d4b.worker.js.map